// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  role          String    @default("customer") // customer | admin
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

model Order {
  id            String   @id @default(cuid())
  orderNumber   String   @unique // Human-readable order number (e.g., "290824-001")
  userId        String
  customerName  String
  customerEmail String
  customerPhone String?
  items         Json
  totalAmount   Float
  paymentMethod String // "online" | "onsite"
  paymentStatus String // "pending" | "paid" | "failed"
  specialCode   String?
  pickupDate    DateTime
  pickupTime    String
  status        String   @default("pending") // "pending" | "confirmed" | "ready"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  scheduledReminders ScheduledReminder[]

  @@map("orders")
}

model SpecialCode {
  id        String    @id @default(cuid())
  code      String    @unique
  isUsed    Boolean   @default(false)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?

  @@map("special_codes")
}

model ScheduledReminder {
  id            String   @id @default(cuid())
  orderId       String
  orderNumber   String
  customerPhone String
  customerName  String
  reminderTime  DateTime
  pickupTime    String
  pickupDate    DateTime
  status        String   @default("pending") // "pending" | "sent" | "failed" | "cancelled"
  createdAt     DateTime @default(now())
  sentAt        DateTime?
  
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("scheduled_reminders")
}
